qarv - a Qt interface to Aravis
===============================

DESCRIPTION
-----------

qarv provides a Qt interface to GeniCam ethernet cameras via the
Aravis library.

For a user, qarv provides:

    - Viewing the video and recording it in either the original or AVI
      formats, with basic controls, such as frames-per-second, pixel
      format and exposure/gain easily accessible. Region-of-interest
      can be selected via manual entry or by drawing it directly in
      the video display.

    - The network interface used by the camera is automatically
      detected and camera's packet size is set to match the interface
      MTU, providing usable (hopefully) performance with minimal
      interaction, unlike the default settings on some cameras.

    - Full access to all camera features is available in a tree view.
      Settings can be saved and restored, subject to some limitations.

    - Basic image transformations: mirroring, rotating, inverting.

    - Histogram; clipped highlights can be marked in the video
      display.


For a programmer, qarv provides:

    - QArvCamera class which isolates the Qt program from Aravis
      internals, thus avoiding clashes between Qt and Glib/GTK. It
      provides direct access to basic settings and emits signals when
      frames are ready. To access features not covered by the basic
      interface, it implements the QAbstractItemModel interface. This
      interface allows access to camera features using Qt's Model/View
      paradigm. The QArvCamera model can thus be plugged directly into
      a "view" widget, as is done in our GUI.

    - QArvCameraDelegate class which implements the
      QStyledItemDelegate interface. It can be used with the
      QArvCamera model to get editing widgets for camera features.

    - QArvType and its subclasses represent camera feature
      types. These provide type identification and editing widget
      implementation for the data model.

    - QArvGui class provides a camera control window that can be
      embedded into a host application. It is the same as the
      standalone application; in fact, the latter is simply a minimal
      host application. The difference is in the recording
      functionality: instead of recording to a file, the GUI will emit
      signals and pass frames to the host application.

    - QArvDecoder and QArvPixelFormat, which are plugin interfaces
      for converting a raw frame into a QImage. Currently provided are
      decoders for 8, 12 and 16 bit grayscale, UYVY and YUYV color
      formats.

    - All of this is provided as libqarv, with headers installed in a
      standard location, such as /usr/include/qarv-0/.

Homepage: http://gitorious.org/adv-staging/qarv
Aravis: https://live.gnome.org/Aravis


REQUIREMENTS AND INSTALLATION
-----------------------------

qarv requires Qt-4.8, aravis-0.2 and libswscale. It can use the ffmpeg
command (if present) to record AVIs, but it is not necessary for
recording raw data.

qarv is built using CMake with no special configuration
options. If you are not familiar with CMake, refer to any
tutorial. But for starters, run these commands from the qarv
directory:

  mkdir build
  cd build
  cmake ..
  make
  sudo make install

You can skip the "make install" step and run qarv from the build
directory directly, although there might be problems with localization
and icon loading.


LICENSING INFORMATION
---------------------

qarv is provided under the GNU General Public License, version 3 or
later. See COPYING for more information.

The icons included with qarv are part of the oxygen theme from the KDE
project (www.kde.org). See res/icons/COPYING for licensing
information.

The qarv icon itself is derived from the oxygen theme as well.

Copyright 2012, 2013 Jure Varlec
